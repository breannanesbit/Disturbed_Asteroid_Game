@page "/lobby/{LobbyDatastring}"
@using Actors.UserActors
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using Shared
@inject IActorBridge akkaService
@rendermode InteractiveServer
@inject SignalRFrontendService signalRservice
@inject LobbyDataService LobbyDataService
@inject ILogger<Lobby> Logger

<PageTitle>Lobby</PageTitle>

<div class="row">
    <p class="col col-5">State: @(gameLobby.CurrentState)</p>
    <p class="col">Points: @Lobby1.user.Ship.Points</p>
    <button type="button" class="btn btn-danger col" @onclick="HandleLobbyDown">Take Down Lobby</button>
</div>
<br />

<div class="@boxClass" style="height: 750px; width: 750px; position:relative;" @onkeydown="HandleKeyPress" @onclick="HandleBoxClick" tabindex="0">
    @foreach(var lazer in lazers)
    {
        <img style="transform: rotate(@(lazer.Angle)deg); transform-origin: center;position:absolute; z-index: 1; left:@(lazer.x)px; top: @(lazer.y)px;" src="images/ships/lazer.svg" alt="lazer"/>
    }
    @foreach(var state in shipsAlive)
    {
        <div style="width:50px; z-index:0;  position:absolute; left:@(state.Ship.x - 21)px; top: @(state.Ship.y-10)px;" class=" col">
            <div class="row text-center" style="transform: rotate(@(state.Ship.Angle)deg); transform-origin: center;">
                <AsteriodWeb.Components.Ships.ShipDisplay Color="@state.Ship.ShipColor" ShipNumber="@state.Ship.ShipImage" />
            </div>
            <div class="progress row" style="height:10px;">
                <div class="progress-bar bg-success" role="progressbar" style="width: @(state.Ship.Health)%" aria-valuenow="@(state.Ship.Health)" aria-valuemin="0" aria-valuemax="100">
                </div>
            </div>
        </div>
    }

    @* <p style="color:red;width:fit-content; position:relative; left:@(state.x)px; top:@(state.y)px;">.</p> *@
    @foreach (var asteroid in asteroids)
    {
        <div style="width:65px; position:absolute; left:@(asteroid.X)px; top: @(asteroid.Y)px;" class=" col">
            <div class="row text-center">
                <img class="asteroid"  src="../../images/Asteroids/@asteroid.ImagePath" alt="asteroid" />
            </div>
            <div class="progress row" style="height:10px;">
                <div class="progress-bar bg-success" role="progressbar" style="width: @(asteroid.Health)%" aria-valuenow="@(asteroid.Health)" aria-valuemin="0" aria-valuemax="100">
                </div>
            </div>
        </div>
    }
    @foreach (var powerup in powerups)
    {
        <div style="height: 30px; width: 30px;position: absolute; left:@(powerup.X)px; top:@(powerup.Y)px;">
            <img style="height:30px; width: 30px;" src="/images/Powerups/@powerup.Image" alt="powerup" />
        </div>
    }
</div>

@code {

    [Parameter]
    public string LobbyDatastring { get; set; }
    public UserAndGameId Lobby1 { get; set; }
    public GameLobby gameLobby { get; set; }
    private List<Asteroid> asteroids;
    private List<Lazer> lazers;
    private List<PowerUp> powerups;
    private List<User> shipsAlive;
    private List<User> ShipsDead;
    private bool isBoxClicked = false;
    private string boxClass => isBoxClicked ? "lobby-body border border-success" : "lobby-body border border-light";
    private Timer timer;
    private List<String> Moves = new List<String>();
    private int lazerCount = 0;
    private int seed = Guid.NewGuid().GetHashCode();


    protected override async Task OnInitializedAsync()
    {
        await signalRservice.IsConnectedAsync();

        var lobbyDataJson = Uri.UnescapeDataString(LobbyDatastring); // Decode URL-encoded JSON string
        Lobby1 = JsonConvert.DeserializeObject<UserAndGameId>(lobbyDataJson);

        gameLobby = LobbyDataService.GetLobbyData(Lobby1.LobbyId);

        asteroids = gameLobby.Asteroids;
        lazers = gameLobby.Lazers;
        powerups = gameLobby.PowerUps;
        shipsAlive = gameLobby.Players;
        ShipsDead = gameLobby.DeadPlayers;
        lazerCount = lazers.Count(l => l.user.Username == Lobby1.user.Username);

        timer = new Timer(async (_) => 
        {
            await HandleSendMove();
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(0.5));

        signalRservice.hubConnection.On<GameLobby>("ReceiveMessage", (message) =>
        {
            Console.WriteLine($"Message state is: {message.CurrentState}");
            if (message.CurrentState == GameState.Playing)
            {
                Console.WriteLine("Got message Playing from signalR");
                gameLobby = message;
                asteroids = gameLobby.Asteroids;
                lazers = gameLobby.Lazers;
                powerups = gameLobby.PowerUps;
                shipsAlive = gameLobby.Players;
                ShipsDead = gameLobby.DeadPlayers;
                var user = message.Players.Find(p => p.Username == Lobby1.user.Username);
                Lobby1.user = user;
                lazerCount = lazers.Count(l => l.user.Username == Lobby1.user.Username);
                InvokeAsync(StateHasChanged);
            }
        });
    }
    private async Task HandleSendMove()
    {
        if (Moves.Any())
        {
            var newMove = Moves.Last();
            var ship = Lobby1.user.Ship;
            //if(newMove != Lobby1.user.Ship.Move)
            //{
            Console.WriteLine($"Ship attempting to move {ship}");
            switch (newMove)
            {
                case "Forward":
                    var w = new MoveEvent()
                        {
                            ShipMoves = ShipMoves.Forward,
                            user = Lobby1.user,
                            lobbyId = gameLobby.Id,
                        };
                    akkaService.Tell(w);
                    break;
                case "Backward":
                    var s = new MoveEvent()
                        {
                            ShipMoves = ShipMoves.Backward,
                            user = Lobby1.user,
                            lobbyId = gameLobby.Id,

                        };
                    akkaService.Tell(s);
                    break;
                case "Left":
                    Moves.Add("Left");

                    var a = new MoveEvent()
                        {
                            ShipMoves = ShipMoves.Left,
                            user = Lobby1.user,
                            lobbyId = gameLobby.Id,

                        };
                    akkaService.Tell(a);
                    break;
                case "Right":
                    Moves.Add("Right");

                    var d = new MoveEvent()
                        {
                            ShipMoves = ShipMoves.Right,
                            user = Lobby1.user,
                            lobbyId = gameLobby.Id,

                        };
                    akkaService.Tell(d);
                    break;
                case "Lazer":
                    Moves.Add("Lazer");
                    if (lazerCount < 7)
                    {
                        var lazer = new Lazer
                            {
                                //user id and lobby id
                                lobbyId = gameLobby.Id,
                                user = Lobby1.user,
                                x = ship.x,
                                y = ship.y,
                                Angle = ship.Angle,
                            };
                        akkaService.Tell(lazer);
                    }
                    break;
            }
            Moves.Remove(newMove);
        //}
        }
    }
    public async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if(Lobby1.user.Ship.isDead)
        {
            StateHasChanged();
            return;
        }
        var key = e.Key;

        switch (key)
        {
            case "w":
                Moves.Add("Forward");
                break;
            case "s":
                Moves.Add("Backward");
                break;
            case "a":
                Moves.Add("Left");
                break;
            case "d":
                Moves.Add("Right");
                break;
            case "l":
                Moves.Add("Lazer");
                break;
        }
        StateHasChanged();
    }
    private void HandleBoxClick()
    {
        isBoxClicked = true;
    }
    private void HandleLobbyDown()
    {
        StopActorMessage lobby = new StopActorMessage()
            {
                LobbyId = gameLobby.Id,
            };
        akkaService.Tell(lobby);
    }

}
