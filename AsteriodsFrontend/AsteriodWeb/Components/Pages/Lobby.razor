@page "/lobby"
@using Actors.UserActors
@using Shared
@inject IActorBridge akkaService
@rendermode InteractiveServer
<PageTitle>Lobby</PageTitle>

<div class="row">
    <p class="col col-5">State: @(state.isDead ? "Game Over": "Playing")</p>
    <p class="col">Points: @state.Points</p>
    <button type="button" class="btn btn-danger col" @onclick="HandleAsteroidCreation">New Asteroid</button>
    @* <button type="button" class="btn btn-danger col col-3" @* @onclick="HandleEnd" *@@* >End Game</button> *@
</div>
<br />

<div class="@boxClass" style="height: 750px; width: 750px; position:relative;" @onkeydown="HandleKeyPress" @onclick="HandleBoxClick" tabindex="0">
    @foreach(var lazer in lazers)
    {
        <img style="transform: rotate(@(lazer.Angle)deg); transform-origin: center;position:absolute; z-index: 1; left:@(lazer.x)px; top: @(lazer.y)px;" src="images/ships/lazer.svg" alt="lazer"/>
    }
    <div style="width:50px; z-index:0;  position:absolute; left:@(state.x - 21)px; top: @(state.y-10)px;" class=" col">
        <div class="row text-center" style="transform: rotate(@(state.Angle)deg); transform-origin: center;">
            <AsteriodWeb.Components.Ships.ShipDisplay Color="@state.ShipColor" ShipNumber="@state.ShipImage" />
        </div>
        <div class="progress row" style="height:10px;">
            <div class="progress-bar bg-success" role="progressbar" style="width: @(state.Health)%" aria-valuenow="@(state.Health)" aria-valuemin="0" aria-valuemax="100">
            </div>
        </div>
    </div>
    @* <p style="color:red;width:fit-content; position:relative; left:@(state.x)px; top:@(state.y)px;">.</p> *@
    @foreach (var asteroid in asteroids)
    {
        <div style="width:65px; position:absolute; left:@(asteroid.X)px; top: @(asteroid.Y)px;" class=" col">
            <div class="row text-center">
                <img class="asteroid"  src="../../images/Asteroids/@asteroid.ImagePath" alt="asteroid" />
            </div>
            <div class="progress row" style="height:10px;">
                <div class="progress-bar bg-success" role="progressbar" style="width: @(asteroid.Health)%" aria-valuenow="@(asteroid.Health)" aria-valuemin="0" aria-valuemax="100">
                </div>
            </div>
        </div>
    }
    @foreach (var powerup in powerups)
    {
        <div style="height: 30px; width: 30px;position: absolute; left:@(powerup.X)px; top:@(powerup.Y)px;">
            <img style="height:30px; width: 30px;" src="/images/Powerups/@powerup.Image" alt="powerup" />
        </div>
    }
</div>

@code {
    private bool isBoxClicked = false;
    private string boxClass => isBoxClicked ? "lobby-body border border-success" : "lobby-body border border-light";
    private Timer timer;
    private Timer powertimer;
    private int powerupTic = 0;
    //lazer list if over 7 can't shoot.

    private List<Asteroid> asteroids = new List<Asteroid>();
    private List<Lazer> lazers = new List<Lazer>();
    private List<PowerUp> powerups = new List<PowerUp>();
    private Ship state = new Ship();
    private int seed = Guid.NewGuid().GetHashCode();

    protected override async Task OnInitializedAsync()
    {
        await InitializeAsteroids();

        timer = new Timer(async (_) => 
        {
            await MoveAsteroids();
            await MoveLazers();
            await AddPointsToShip(10);
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(0.05));
    }

    private async Task InitializeAsteroids()
    {
        PowerUp powerup = new PowerUp();
        powerup.PowerUpCreation(seed);
        powerups.Add(powerup);
        Asteroid asteroid = new Asteroid();
        asteroid.RandomCreation(seed);
        asteroids.Add(asteroid);

    }


    private async Task MoveAsteroids()
    {   for(int i = powerups.Count -1; i >= 0; i--)
        {
            powerups[i].MoveLeft();
            if(!powerups[i].CheckBoundaries())
            { powerups.Remove(powerups[i]);
                PowerUp power = new PowerUp();
                power.PowerUpCreation(seed);
                powerups.Add(power);
                continue;//hopefully stop the powerup from breaking the page when outof bounds.
            }

            if (state.CheckBox(powerups[i].X, powerups[i].Y))
            {
                state.TogglePowerup(true);
                StartPowerupTimer();
                powerups.Remove(powerups[i]);
                PowerUp power = new PowerUp();
                power.PowerUpCreation(seed);
                powerups.Add(power);
            }
        }
        for (int i = asteroids.Count - 1; i >= 0; i--)
        {
            var asteroid = asteroids[i];
            asteroid.Move();
            if (asteroid.Health <= 0)
            { asteroids.Remove(asteroid); }
            if (state.CheckBox(asteroid.X, asteroid.Y))
            {
                state.Damage(10);
            }

        }
        await InvokeAsync(StateHasChanged);
    }
    private async Task MoveLazers()
    {
        for (int i = lazers.Count - 1; i >= 0; i--)
        {
            var lazer = lazers[i];
            var isNotOnBoard = lazer.Move();
            if(isNotOnBoard)
            {
                lazers.Remove(lazer);
            }
            bool collisionDetected = false; 
            for (int k = asteroids.Count - 1; k >= 0; k--)
            {
                var asteroid = asteroids[k];
                if (asteroid.CheckBox(lazer.x, lazer.y))
                {
                    asteroid.Damage();
                    collisionDetected = true; 
                    break; 
                }
            }
            if (collisionDetected)
            {
                lazers.Remove(lazer);
            }

        }
        await InvokeAsync(StateHasChanged);
    }
    public async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if(state.isDead)
        {
            StateHasChanged();
            return;
        }
        var key = e.Key;

        switch (key)
        {
            case "w":
                var w = new MoveEvent(){
                        ShipMoves = ShipMoves.Forward,
                        //user = 
                    };
                akkaService.Tell(w);
                state.moveForward();
                break;
            case "s":
                var s = new MoveEvent()
                    {
                        ShipMoves = ShipMoves.Backward,
                        //user =
                    };
                akkaService.Tell(s);
                state.moveBackward();
                break;
            case "a":
                var a = new MoveEvent()
                    {
                        ShipMoves = ShipMoves.Left,
                    };
                akkaService.Tell(a);
                state.moveLeft();
                break;
            case "d":
                var d = new MoveEvent()
                    {
                        ShipMoves = ShipMoves.Right,
                    };
                akkaService.Tell(d);
                state.moveRight();
                break;
            case "l":
                if (lazers.Count < 7)
                {
                    var lazer =new Lazer
                    {
                        //user id and lobby id
                        x = state.x,
                        y = state.y,
                        Angle = state.Angle,
                    };
                    lazers.Add(lazer);
                    akkaService.Tell(lazer);
                }
                break;
        }
        StateHasChanged();
    }
    private void StartPowerupTimer()
    {
        powerupTic = 0;
        powertimer = new Timer(async (_) =>
        {
            if(!state.HasPowerup)
            {
                powertimer.Dispose();
            }
            else
            {

                await ApplyPower();
            }
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }
    private async Task ApplyPower()
    {
        if(powerupTic != 20)
        {

            state.TogglePowerup(true);
            powerupTic += 1;
        }
        else
        {
            state.TogglePowerup(false);
            powertimer.Dispose();
        }
        await InvokeAsync(StateHasChanged);
    }
    private void HandleBoxClick()
    {
        isBoxClicked = true;
    }
    private async Task AddPointsToShip(int points)
    {
        state.Points += points;
    }
    public void HandleAsteroidCreation()
    {
        Asteroid asteroid = new Asteroid();
        int seed = Guid.NewGuid().GetHashCode();
        asteroid.RandomCreation(seed);
        asteroids.Add(asteroid);
    }
}
