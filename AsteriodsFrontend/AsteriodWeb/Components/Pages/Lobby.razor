@page "/lobby/{LobbyDatastring}"
@using Actors.UserActors
@using Newtonsoft.Json
@using Shared
@rendermode InteractiveServer
@inject SignalRFrontendService signalRservice
@inject ILogger<Lobby> Logger

<PageTitle>Lobby</PageTitle>

<div class="row">
    <p class="col col-5">State: @(state.isDead ? "Game Over": "Playing")</p>
    @* <button type="button" class="btn btn-danger col col-3" @* @onclick="HandleEnd" *@@* >End Game</button> *@
</div>
<br />

<div class="@boxClass" style="height: 750px; width: 750px; position:relative;" @onkeydown="HandleKeyPress" @onclick="HandleBoxClick" tabindex="0">
    @foreach(var lazer in lazers)
    {
        <img style="transform: rotate(@(lazer.Angle)deg); transform-origin: center;position:absolute; z-index: 1; left:@(lazer.x)px; top: @(lazer.y)px;" src="images/ships/lazer.svg" alt="lazer"/>
    }
    <div style="width:50px; z-index:0;  position:absolute; left:@(state.x - 21)px; top: @(state.y-10)px;" class=" col">
        <div class="row text-center" style="transform: rotate(@(state.Angle)deg); transform-origin: center;">
            <AsteriodWeb.Components.Ships.ShipDisplay Color="@state.ShipColor" ShipNumber="@state.ShipImage" />
        </div>
        <div class="progress row" style="height:10px;">
            <div class="progress-bar bg-success" role="progressbar" style="width: @(state.Health)%" aria-valuenow="@(state.Health)" aria-valuemin="0" aria-valuemax="100">
            </div>
        </div>
    </div>
    @* <p style="color:red;width:fit-content; position:relative; left:@(state.x)px; top:@(state.y)px;">.</p> *@
    @foreach (var asteroid in asteroids)
    {
        <div style="width:65px; position:absolute; left:@(asteroid.X)px; top: @(asteroid.Y)px;" class=" col">
            <div class="row text-center">
                <img class="asteroid"  src="../../images/Asteroids/@asteroid.ImagePath" alt="asteroid" />
            </div>
            <div class="progress row" style="height:10px;">
                <div class="progress-bar bg-success" role="progressbar" style="width: @(asteroid.Health)%" aria-valuenow="@(asteroid.Health)" aria-valuemin="0" aria-valuemax="100">
                </div>
            </div>
        </div>
    }
    @foreach (var powerup in powerups)
    {
        <div style="height: 30px; width: 30px;position: absolute; left:@(powerup.X)px; top:@(powerup.Y)px;">
            <img style="height:30px; width: 30px;" src="/images/Powerups/@powerup.Image" alt="powerup" />
        </div>
    }
</div>

@code {

    [Parameter]
    public UserInAGame Lobby1 { get; set; }
    public string LobbyDatastring { get; set; }

    private List<Asteroid> asteroids = new List<Asteroid>();
    private List<Lazer> lazers = new List<Lazer>();
    private List<Powerup> powerups = new List<Powerup>();
    private Ship state = new Ship();
    private bool isBoxClicked = false;
    private string boxClass => isBoxClicked ? "lobby-body border border-success" : "lobby-body border border-light";
    private Timer timer;
    private Timer powertimer;
    private int powerupTic = 0;
    //health power up that increases health over time and glows
    class Powerup
    {
        public int PowerupType { get; set; } = 0;
        public int X { get; set; } = 690;
        public int Y { get; set; } = 100;
        public int BoundaryLeft { get; } = 0;
        public int BoundaryTop { get; } = 0;
        public int BoundaryRight { get; } = 695;
        public int BoundaryBottom { get; } = 695;
        public int HitBox { get; set; } = 30;
        public string Image { get; set; } = "gear.svg";
        public int Speed { get; set; } = 1;

        public void MoveLeft()
        {
            X -= Speed;
        }
        public bool CheckBoundaries()
        {
            return X >= BoundaryLeft && X <= BoundaryRight && Y <= BoundaryBottom && Y >= BoundaryTop;
        }
        public void PowerUpCreation()
        {
            switch(PowerupType)
            {
                case 0:
                    Image = "gear.svg";
                    break;
                case 1:
                    Image = "target.svg";
                    //dual
                    //color change
                    break;
                case 2:
                    Image = "target.svg";
                    //tripple
                    //color change
                    break;
                default:
                    break;
            }
        }
        public void CreatRandom()
        {
            PowerupType = 1;
            PowerUpCreation();
        }
    }
    //missle power up that allows for dual lasers+ 


    protected override async Task OnInitializedAsync()
    {
        await signalRservice.IsConnectedAsync();

        var lobbyDataJson = Uri.UnescapeDataString(LobbyDatastring); // Decode URL-encoded JSON string
        Lobby1 = JsonConvert.DeserializeObject<UserInAGame>(lobbyDataJson);

        await InitializeAsteroids();
        
        timer = new Timer(async (_) => 
        {
            await MoveAsteroids();
            await MoveLazers();
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(0.05));
    }

    private async Task InitializeAsteroids()
    {
        powerups.Add(new Powerup
            {
                PowerupType = 0, 
            }
        );
        asteroids.Add(new Asteroid
            {
                X = 690,
                spawnX = 690,
                Y = 10,
                spawnY = 10,
                ImagePath = "asteroid-1.svg",
                Movement = "Diagonal",
            });
        asteroids.Add(new Asteroid
            {
                X = 10,
                spawnX = 10,
                Y = 10,
                spawnY = 10,
                ImagePath = "asteroid-3.svg",
                Movement = "Down",
            });
        asteroids.Add(new Asteroid
            {
                X = 650,
                spawnX = 650,
                Y = 690,
                spawnY = 690,
                ImagePath = "asteroid-2.svg",
                Movement = "Up",
            });
        asteroids.Add(new Asteroid
            {
                X = 10,
                spawnX = 10,
                Y = 290,
                spawnY = 290,
                ImagePath = "asteroid-2.svg",
                Movement = "Right",
            });
        asteroids.Add(new Asteroid
            {
                X = 690,
                spawnX = 690,
                Y = 100,
                spawnY = 100,
                ImagePath = "asteroid-2.svg",
                Movement = "Left",
            });
    }


    private async Task MoveAsteroids()
    {   for(int i = powerups.Count -1; i >= 0; i--)
        {
            powerups[i].MoveLeft();
            if(!powerups[i].CheckBoundaries())
            { powerups.Remove(powerups[i]);
                Powerup power = new Powerup();
                power.CreatRandom();
                powerups.Add(power);
                continue;//hopefully stop the powerup from breaking the page when outof bounds.
            }

            if (state.CheckBox(powerups[i].X, powerups[i].Y))
            {
                state.TogglePowerup(true);
                StartPowerupTimer();
                powerups.Remove(powerups[i]);
                Powerup power = new Powerup();
                power.CreatRandom();
                powerups.Add(power);
            }
        }
        for (int i = asteroids.Count - 1; i >= 0; i--)
        {
            var asteroid = asteroids[i];
            asteroid.Move();
            if (asteroid.Health <= 0)
            { asteroids.Remove(asteroid); }
            if (state.CheckBox(asteroid.X, asteroid.Y))
            {
                state.Damage(10);
            }

        }
        await InvokeAsync(StateHasChanged);
    }
    private async Task MoveLazers()
    {
        for (int i = lazers.Count - 1; i >= 0; i--)
        {
            var lazer = lazers[i];
            var isNotOnBoard = lazer.Move();
            if(isNotOnBoard)
            {
                lazers.Remove(lazer);
            }
            bool collisionDetected = false; 
            for (int k = asteroids.Count - 1; k >= 0; k--)
            {
                var asteroid = asteroids[k];
                if (asteroid.CheckBox(lazer.x, lazer.y))
                {
                    asteroid.Damage();
                    collisionDetected = true; 
                    break; 
                }
            }
            if (collisionDetected)
            {
                lazers.Remove(lazer);
            }

        }
        await InvokeAsync(StateHasChanged);
    }
    public async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if(state.isDead)
        {
            StateHasChanged();
            return;
        }
        var key = e.Key;

        switch (key)
        {
            case "w":
                state.moveForward();
                break;
            case "s":
                state.moveBackward();
                break;
            case "a":
                state.moveLeft();
                break;
            case "d":
                state.moveRight();
                break;
            case "l":
                if (lazers.Count < 7)
                {
                    lazers.Add(new Lazer
                        {
                            x = state.x,
                            y = state.y,
                            Angle = state.Angle,
                        });
                }
                break;
        }
        StateHasChanged();
    }
    private void StartPowerupTimer()
    {
        powerupTic = 0;
        powertimer = new Timer(async (_) =>
        {
            if(!state.HasPowerup)
            {
                powertimer.Dispose();
            }
            else
            {
                
                await ApplyPower();
            }
            }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }
    private async Task ApplyPower()
    {
        if(powerupTic != 20)
        {

            state.TogglePowerup(true);
            powerupTic += 1;
        }
        else
        {
            state.TogglePowerup(false);
            powertimer.Dispose();
        }
        await InvokeAsync(StateHasChanged);
    }
    private void HandleBoxClick()
    {
        isBoxClicked = true;
    }
}
