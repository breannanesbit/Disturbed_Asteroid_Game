@page "/lobby"
@rendermode InteractiveServer
<PageTitle>Lobby</PageTitle>

<div class="row">
    <p class="col col-5">State: Playing</p>
    <button type="button" class="btn btn-danger col col-3" @* @onclick="HandleEnd" *@>End Game</button>
</div>

<button type="button" class="btn btn-success" @onclick="HandleBoxClick">Test click</button>

<div class="@boxClass" style="height: 750px; width: 750px; position:relative;" @onkeydown="HandleKeyPress" @onclick="HandleBoxClick" tabindex="0">
    <div style="width:50px; transform: rotate(@(state.Angle)deg); transform-origin: center; position:absolute; left:@(state.x)px; top: @(state.y)px;" class=" col">
        <div class="row text-center">
            <img class="ship" src="images/ships/space-ship.svg" alt="ship" />
        </div>
        <div class="progress row" style="height:10px;">
            <div class="progress-bar bg-success" role="progressbar" style="width: @(state.Health)%" aria-valuenow="@(state.Health)" aria-valuemin="0" aria-valuemax="100">
            </div>
        </div>
    </div>

    @foreach (var asteroid in asteroids)
    {
        <div style="width:65px; position:absolute; left:@(asteroid.X)px; top: @(asteroid.Y)px;" class=" col">
            <div class="row text-center">
                <img class="asteroid"  src="../../images/Asteroids/@asteroid.ImagePath" alt="asteroid" />
            </div>
            <div class="progress row" style="height:10px;">
                <div class="progress-bar bg-success" role="progressbar" style="width: @(asteroid.Health)%" aria-valuenow="@(state.Health)" aria-valuemin="0" aria-valuemax="100">
                </div>
            </div>
        </div>
    }
</div>

@code {
    private class ShipState
    {
        public int x { get; set; } = 0;
        public int y { get; set; } = 0;
        public int BoundaryLeft { get; } = 0;
        public int BoundaryTop { get; } = 0;
        public int BoundaryRight { get; } = 700;
        public int BoundaryBottom { get; } = 700;
        public int Health { get; set; } = 100;
        public int Angle { get; set; } = 0;
    }

    private class Asteroid
    {
        public int X { get; set; } = 0;
        public int Y { get; set; } = 0;
        public int spawnX { get; set; }= 0;
        public int spawnY { get; set; } = 0;
        public int Health { get; set; } = 100;
        public string ImagePath { get; set; } = "";
        public int Speed { get; set; } = 5;
        //public bool Diagonal { get; set; }
        public string Movement { get; set; } = "";
        public int BoundaryLeft { get; } = 0;
        public int BoundaryTop { get; } = 0;
        public int BoundaryRight { get; } = 700;
        public int BoundaryBottom { get; } = 700;

        public void Move()
        {
            switch(Movement)
            {
                case "Diagonal":
                    MoveDiagonal();
                    break;
                case "Down":
                    MoveDown();
                    break;
                case "Up":
                    MoveUp();
                    break;
                case "Left":
                    MoveLeft();
                    break;
                case "Right":
                    MoveRight();
                    break;
            } 
                if (!CheckBoundaries())
                {
                    X = spawnX;
                    Y = spawnY;
                }
        }


        public void MoveDown()
        {
            Y += Speed;
            //if the asteroid goes in border it needs to disapear or bounce off.
        }

        public void MoveDiagonal()
        {
            X -= Speed;
            Y += Speed;
        }

        public void MoveUp()
        {
            Y -= Speed;
        }

        public void MoveLeft()
        {
            X -= Speed;
        }

        public void MoveRight()
        {
            X += Speed;
        }

        public bool CheckBoundaries()
        {
            return X >= BoundaryLeft && X <= BoundaryRight && Y <= BoundaryBottom && Y >= BoundaryTop;
        }
    }

    private List<Asteroid> asteroids = new List<Asteroid>();
    private ShipState state = new ShipState();
    private bool isBoxClicked = false;
    private string boxClass => isBoxClicked ? "lobby-body border border-success" : "lobby-body border border-light";
    private Timer timer;
    private int TurnStep = 10;
    private double radiansPerDegree = Math.PI / 180;

    protected override async Task OnInitializedAsync()
    {
        await InitializeAsteroids();
        timer = new Timer(async (_) => await MoveAsteroids(), null, TimeSpan.Zero, TimeSpan.FromSeconds(0.05));
    }

    private async Task InitializeAsteroids()
    {
        asteroids.Add(new Asteroid
            {
                X = 690,
                spawnX = 690,
                Y = 10,
                spawnY = 10,
                ImagePath = "asteroid-1.svg",
                Movement = "Diagonal",
            });
        asteroids.Add(new Asteroid
            {
                X = 10,
                spawnX = 10,
                Y = 10,
                spawnY = 10,
                ImagePath = "asteroid-3.svg",
                Movement = "Down",
            });
        asteroids.Add(new Asteroid
            {
                X = 650,
                spawnX = 650,
                Y = 690,
                spawnY = 690,
                ImagePath = "asteroid-2.svg",
                Movement = "Up",
            });
        asteroids.Add(new Asteroid
            {
                X = 10,
                spawnX = 10,
                Y = 290,
                spawnY = 290,
                ImagePath = "asteroid-2.svg",
                Movement = "Right",
            });
        asteroids.Add(new Asteroid
            {
                X = 690,
                spawnX = 690,
                Y = 100,
                spawnY = 100,
                ImagePath = "asteroid-2.svg",
                Movement = "Left",
            });
    }

    private async Task MoveAsteroids()
    {
        for (int i = asteroids.Count - 1; i >= 0; i--)
        {
            var asteroid = asteroids[i];
            asteroid.Move();
            
        }
        await InvokeAsync(StateHasChanged);
    }

    public async Task HandleKeyPress(KeyboardEventArgs e)
    {
        var key = e.Key;
        const int step = 10;
        double angleInRadians = state.Angle * radiansPerDegree;

        switch (key)
        {
            case "w":
                int deltaX = (int)Math.Round(step * Math.Sin(angleInRadians));
                int deltaY = (int)Math.Round(step * Math.Cos(angleInRadians));
                state.x += deltaX;
                state.y -= deltaY;
                break;
            case "s":
                int backwardDeltaX = -(int)Math.Round(step * Math.Sin(angleInRadians));
                int backwardDeltaY = -(int)Math.Round(step * Math.Cos(angleInRadians));
                state.x += backwardDeltaX;
                state.y -= backwardDeltaY;
                break;
            case "a":
                state.Angle -= TurnStep;
                break;
            case "d":
                state.Angle += TurnStep;
                break;
        }
        StateHasChanged();
    }

    private void HandleBoxClick()
    {
        isBoxClicked = true;
    }
}
