@page "/LobbyStartPage"
@using Actors.UserActors
@using Shared;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IActorBridge akkaService


@* <h3>Lobby: @Lobby1.Id</h3>
<button class="btn btn-outline-success" onclick="ChangeGameState">Start Game</button> *@
<div class="row">
    <h3 class="col">Lobby: 2</h3>
    <button class=" col btn btn-outline-success" @onclick="ChangeGameState">Start Game</button>
</div>

<div class="row">
    <div class="col">
        <h5 class="text-decoration-underline">Players</h5>
        <ul>
            @foreach (var player in Lobby1.Game.Players)
            {
                <li>@player.Username: 
                <AsteriodWeb.Components.Ships.ShipDisplay Color="@player.Ship.ShipColor" ShipNumber="@player.Ship.ShipImage" />
                </li>

            }
        </ul>
    </div>
    <div class="col">
        <h4>Select Ship Color:</h4>
        <div class="d-flex pb-3">
            @foreach (var color in ShipColors)
            {
                <div class="ship-color-box border"
                     style="background-color: @color.Item2;"
                     @onclick="() => ColorSelected(color.Item1)"
                     title="Select @color.Item1">
                </div>
            }
        </div>
        <div class="row">
            @for(int i = 0; i < 4; i++)
            {
                int s = i;
                <div class="col" id="@($"ship-{i}")" @onclick="() => ShipClicked(s)">
                    <AsteriodWeb.Components.Ships.ShipDisplay Color="@SelectedColor" ShipNumber="@i"/>
                </div>
                
            }
        </div>
    </div>
</div>

@code {
    private List<(string, string)> ShipColors = new List<(string, string)>
    {
        ("red", "#e60000"),
        ("blue", "#0099ff"),
        ("green", "#2eb82e"),
        ("yellow", "#ffcc00"),
        ("orange", "#ff9900"),
        ("white", "#ffffff"),
        ("teal", "#33cccc")
    };

    private string SelectedColor { get; set; }

    private void ColorSelected(string color)
    {
        Console.WriteLine("color selected", color);
        var currentPlayer = Lobby1.Game.Players.FirstOrDefault(p => p.Username == Lobby1.user.Username);

        if (currentPlayer != null)
        {
            currentPlayer.Ship.ShipColor = color;
            currentPlayer.Ship.OriginalColor = color;
            SelectedColor = color;
            StateHasChanged();
            //currentPlayer.SpaceShip.color = color;
        }
    }
    private void ShipClicked(int image)
    {
        Console.WriteLine("selected image:",image);
        var currentPlayer = Lobby1.Game.Players.FirstOrDefault(p => p.Username == Lobby1.user.Username);
        if(currentPlayer != null)
        {
            currentPlayer.Ship.ShipImage = image;
            StateHasChanged();
        }
    }



    [Parameter]
    public UserInAGame Lobby1 { get; set; }
    private HubConnection? hubConnection;


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://signalrapi:8000/ComunicationHub")
        //.WithUrl("http://localhost:32772/ComunicationHub")
        .Build();

        hubConnection.On<GameLobby>("GameStarted", (message) =>
            {
                if(message.CurrentState == GameState.Playing)
                {
                    //navigate to the lobby game page
                    Lobby1.Game = message;

                    NavigationManager.NavigateTo($"/lobby?Lobby1={Lobby1}");
             }

         });

         await hubConnection.StartAsync();
     }

     // Dispose the hub connection when component is disposed
     public async ValueTask DisposeAsync()
         {
         if (hubConnection != null)
             await hubConnection.DisposeAsync();
     }

     private async Task ChangeGameState()
        {
        var cgs = new ChangeGameState
                 {
                 user = Lobby1.Game.HeadPlayer.Username,
                 lobbyId = Lobby1.Game.Id,
                 lobby = Lobby1.Game,
                 lobbyState = GameState.Playing
         };
         var result = await akkaService.Ask<ChangeGameState>(cgs);

    }
}

