@page "/LobbyStartPage/{LobbyDatastring}"
@using Newtonsoft.Json
@using Actors.UserActors
@using Shared;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IActorBridge akkaService
@inject SignalRFrontendService signalRservice
@inject LobbyDataService LobbyDataService
@inject ILogger<TalkToActor> Logger



@* <h3>Lobby: @Lobby1.Id</h3>
<button class="btn btn-outline-success" onclick="ChangeGameState">Start Game</button> *@
<div class="row">
    <h3 class="col">Lobby: @LobbyData.Game.Id</h3>
    <p>@LobbyData.Game.CurrentState</p>
    @if(LobbyData.user.Username == LobbyData.Game.HeadPlayer.Username)
    {
        <button class=" col btn btn-outline-success" @onclick="ChangeGameState">Start Game</button>
    }
</div>

<div class="row">
    <div class="col">
        <h5 class="text-decoration-underline">Players</h5>
        <ul>
            @if(LobbyData != null)
            {
                @foreach (var player in LobbyData.Game.Players)
                {
                    <li>@player.Username: 
                    <AsteriodWeb.Components.Ships.ShipDisplay Color="@player.Ship.ShipColor" ShipNumber="@player.Ship.ShipImage" />
                    </li>

                }
                
            }
        </ul>
    </div>
    <div class="col">
        <h4>Select Ship Color:</h4>
        <div class="d-flex pb-3">
            @foreach (var color in ShipColors)
            {
                <div class="ship-color-box border"
                     style="background-color: @color.Item2;"
                     @onclick="() => ColorSelected(color.Item1)"
                     title="Select @color.Item1">
                </div>
            }
        </div>
        <div class="row">
            @for(int i = 0; i < 4; i++)
            {
                int s = i;
                <div class="col" id="@($"ship-{i}")" @onclick="() => ShipClicked(s)">
                    <AsteriodWeb.Components.Ships.ShipDisplay Color="@SelectedColor" ShipNumber="@i"/>
                </div>
                
            }
        </div>
    </div>
</div>

@code {
    private List<(string, string)> ShipColors = new List<(string, string)>
    {
        ("red", "#e60000"),
        ("blue", "#0099ff"),
        ("green", "#2eb82e"),
        ("yellow", "#ffcc00"),
        ("orange", "#ff9900"),
        ("white", "#ffffff"),
        ("teal", "#33cccc")
    };

    private string SelectedColor { get; set; }

    private void ColorSelected(string color)
    {
        Console.WriteLine("color selected", color);
        var currentPlayer = LobbyData.Game.Players.FirstOrDefault(p => p.Username == LobbyData.user.Username);

        if (currentPlayer != null)
        {
            currentPlayer.Ship.ShipColor = color;
            currentPlayer.Ship.OriginalColor = color;
            SelectedColor = color;
            StateHasChanged();
            //currentPlayer.SpaceShip.color = color;
        }
    }
    private void ShipClicked(int image)
    {
        Console.WriteLine("selected image:",image);
        var currentPlayer = LobbyData.Game.Players.FirstOrDefault(p => p.Username == LobbyData.user.Username);
        if(currentPlayer != null)
        {
            currentPlayer.Ship.ShipImage = image;
            StateHasChanged();
        }
    }



    [Parameter]
    public string LobbyDatastring { get; set; }
    public UserInAGame LobbyData { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await signalRservice.IsConnectedAsync();
        Console.WriteLine(signalRservice.hubConnection.ConnectionId);
        var lobbyDataJson = Uri.UnescapeDataString(LobbyDatastring); // Decode URL-encoded JSON string
        LobbyData = JsonConvert.DeserializeObject<UserInAGame>(lobbyDataJson);
        Console.WriteLine($"Count of players form lobbystartpage { LobbyData?.Game.Players.Count}");

        signalRservice.hubConnection.On<GameLobby>("ReceiveMessage", (message) =>
            {
                if(message.CurrentState == GameState.Playing)
                {
                    //start count down on the page.
                    Console.WriteLine("lobby state is playing");
                    //navigate to the lobby game page
                    Logger.LogInformation($"made to to start the game");
                    LobbyData.Game = message;

                    LobbyDataService.SetLobbyData(LobbyData.Game.Id, LobbyData.Game);

                    var userToLobby = new UserAndGameId()
                    {
                        user = LobbyData.user,
                        LobbyId = LobbyData.Game.Id
                    };

                    var serlData = JsonConvert.SerializeObject(userToLobby);
                    NavigationManager.NavigateTo($"/lobby/{Uri.EscapeDataString(serlData)}");
             }

         });

     }

     // Dispose the hub connection when component is disposed
     

     private async Task ChangeGameState()
        {
        var cgs = new ChangeGameState
                 {
                 user = LobbyData.Game.HeadPlayer.Username,
                lobbyId = LobbyData.Game.Id,
                lobby = LobbyData.Game,
                 lobbyState = GameState.Playing
         };
         akkaService.Tell(cgs);

    }
}

