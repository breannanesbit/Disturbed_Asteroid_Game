@page "/user-input"
@using Actors.UserActors
@using Akka.Actor
@using Microsoft.AspNetCore.SignalR.Client
@using Shared
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IActorBridge akkaService
@inject ILogger<TalkToActor> Logger // Inject ILogger here


<h3>Enter Username and then can be added to a Lobby</h3>
<label for="usernameid">Username</label>
<InputText id="usernameid" class="form-control" @bind-Value="key" @oninput="ValidateInput" />
<span class="text-danger">@validationMessage</span>
<button class="btn btn-primary" @onclick="SendKey">Send</button>

@if (!string.IsNullOrEmpty(response.Username))
{
    @if(lobbies.Count() > 0)
    {
        @foreach(var l in lobbies)
        {
            <p>@l.Id</p>
            <button class="btn btn-primary" @onclick="() => JoinLobby(l.Id)">Join Lobby</button>
        }
    }

    <p>@response.Username</p>
    <p>@response.Path</p>
    <button class="btn btn-primary" @onclick="() => CreateANewLobby()">Create a new Lobby</button>

} 

@code {
    private string key = "";
    private User response = new();
    private HubConnection? hubConnection;
    private GameLobby GotSingalRMessage = new();
    private List<Actors.UserActors.Lobby> lobbies = new();
    private string validationMessage;
    private User u = new();


    private void ValidateInput(ChangeEventArgs e)
    {
        string inputValue = e.Value.ToString();

        // Regular expression to match only alphanumeric characters
        if (!System.Text.RegularExpressions.Regex.IsMatch(inputValue, "^[a-zA-Z0-9]*$"))
        {
            validationMessage = "Username must contain only letters and numbers.";
        }
        // Character length validation
        else if (inputValue.Length > 15) // Adjust the character length limit as needed
        {
            validationMessage = "Username cannot exceed 15 characters.";
        }
        else
        {
            validationMessage = null;
        }
    }

    private async Task SendKey()
    {
        Logger.LogInformation("sending user name");
        Console.WriteLine("Made it to sendKey");
        u = new User() { Username= key, hubConnection = hubConnection.ConnectionId };

        // Obtain a reference to the router actor
        var result = await akkaService.Ask<User>(u);
        Console.WriteLine(result);
        response = result; 
    }

    private async Task CreateANewLobby()
    {
        var hubc = hubConnection?.ConnectionId;
        var nl = new NewLobbyObject() { username = key, hubConnection = hubc };


        var result = await akkaService.Ask<ChangeUserState>(nl);
        if(result != null)
        {
            Console.WriteLine("made it all the way");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
           //.WithUrl("http://172.31.0.5/ComunicationHub")
           //.WithUrl("http://asteriodsweb.localhost/ComunicationHub")
           .WithUrl("http://signalrapi:8080/ComunicationHub")
            .Build();

        hubConnection.On<GameLobby>("ReceiveMessage", (message) =>
        {

            Logger.LogInformation("Made it to receive gamelobby object");
            GotSingalRMessage = message;

            var userToGame = new UserInAGame()
            {
                user = u,
                Game = GotSingalRMessage,
            };

            NavigationManager.NavigateTo($"/LobbyStartPage?Lobby1={userToGame}");
            StateHasChanged();
        });

        hubConnection.On<AllLobbies>("GetAllLobbies", (lobbie) =>
        {
            Console.WriteLine("Client side");
            Logger.LogInformation($"Got all lobbies {lobbie.Lobbies}");
            lobbies = lobbie.Lobbies;
            StateHasChanged();
        });


        Console.WriteLine("Before start up");

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine($"Connection Id : {hubConnection.ConnectionId}");
            Logger.LogInformation("Connection made it");
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }

        

        var getlobbies = new AllLobbies();

        akkaService.Tell(getlobbies);

    }

    public void JoinLobby(Guid id)
    {
        var addNewUser = new AddUserToLobby()
            {
                username = key,
                lobbyId = id,
            };

        akkaService.Tell(addNewUser);
    }

    // Dispose the hub connection when component is disposed
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
            await hubConnection.DisposeAsync();
    } 

}

