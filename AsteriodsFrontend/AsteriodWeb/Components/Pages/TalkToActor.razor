@page "/user-input"
@using Actors.UserActors
@using Akka.Actor
@using Akka.AspNetCore
@using Microsoft.AspNetCore.SignalR.Client
@using Shared
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IActorBridge akkaService

<h3>Enter Username and then can be added to a Lobby</h3>

    <label for="usernameid">Username</label>
<input id="usernameid" class="form-control" @bind="key" /> 
<button class="btn btn-primary" @onclick="SendKey">Send</button>

@if (!string.IsNullOrEmpty(response.Username))
{
    @if(lobbies.Count() > 0)
    {
        @foreach(var l in lobbies)
        {
            <p>@l.Id</p>
            <button class="btn btn-primary" @onclick="() => JoinLobby(l.Id)">Join Lobby</button>
        }
    }

    <p>@response.Username</p>
    <p>@response.Path</p>
    <button class="btn btn-primary" @onclick="() => CreateANewLobby()">Create a new Lobby</button>

} 

@code {
    private string key = "";
    private User response = new();
    private HubConnection? hubConnection;
    private GameLobby GotSingalRMessage = new();
    private List<Actors.UserActors.Lobby> lobbies = new();



    private async Task SendKey()
    {
        Console.WriteLine("Made it to sendKey");
        var u = new User() { Username= key};

        // Obtain a reference to the router actor
        var result = await akkaService.Ask<User>(u);
        Console.WriteLine(result);
        response = result; 
    }

    private async Task CreateANewLobby()
    {
        var hubc = hubConnection?.ConnectionId;
        var nl = new NewLobbyObject() { username = key, hubConnection = hubc };


        var result = await akkaService.Ask<ChangeUserState>(nl);
        if(result != null)
        {
            Console.WriteLine("made it all the way");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl("http://signalrapi:8080/ComunicationHub")
            //.WithUrl("http://localhost:32794/ComunicationHub")
            .Build();

        hubConnection.On<GameLobby>("ReceiveMessage", (message) =>
        {
            Console.WriteLine("made it");
            GotSingalRMessage = message;
            NavigationManager.NavigateTo($"/LobbyStartPage?lobby={GotSingalRMessage}");
            StateHasChanged();
        });

        hubConnection.On<AllLobbies>("GetAllLobbies", (lobbie) =>
        {
            lobbies = lobbie.Lobbies;
            StateHasChanged();
        });


        Console.WriteLine("Before start up");

        await hubConnection.StartAsync();
        Console.WriteLine("Connection made it");

        var getlobbies = new AllLobbies();

        akkaService.Tell(getlobbies);

    }

    public void JoinLobby(Guid id)
    {
        var addNewUser = new AddUserToLobby()
            {
                username = key,
                lobbyId = id,
            };

        akkaService.Tell(addNewUser);
    }

    // Dispose the hub connection when component is disposed
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
            await hubConnection.DisposeAsync();
    } 

}

