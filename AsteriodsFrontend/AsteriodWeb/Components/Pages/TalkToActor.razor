@page "/user-input"
@using Actors.UserActors
@using Akka.Actor
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using Shared
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IActorBridge akkaService
@inject ILogger<TalkToActor> Logger 
@inject SignalRFrontendService signalRservice


<h3>Enter Username and then can be added to a Lobby</h3>
<label for="usernameid">Username</label>
<InputText id="usernameid" class="form-control" @bind-Value="key" @oninput="ValidateInput" />
<span class="text-danger">@validationMessage</span>

@if(validationMessage == null)
{
<button class="btn btn-primary" @onclick="SendKey">Send</button>
    
}

@if (!string.IsNullOrEmpty(response.Username))
{
    @if(lobbies.Count() > 0)
    {
        @foreach(var l in lobbies)
        {
            <p>List of Lobbies</p>
            <p>@l</p>
            <button class="btn btn-primary" @onclick="() => JoinLobby(l)">Join Lobby</button>
        }
    }

    <p>@response.Username</p>
    <p>@response.Path</p>
    <button class="btn btn-primary" @onclick="() => CreateANewLobby()">Create a new Lobby</button>

} 

@code {
    private string key = "";
    private User response = new();
    private GameLobby GotSingalRMessage = new();
    private List<Guid> lobbies = new();
    private string? validationMessage = null;
    private User u = new();
    private Guid clickedLobbyId = Guid.NewGuid();

    private void ValidateInput(ChangeEventArgs e)
    {
        string inputValue = e.Value.ToString();

        // Regular expression to match only alphanumeric characters
        if (!System.Text.RegularExpressions.Regex.IsMatch(inputValue, "^[a-zA-Z0-9]*$"))
        {
            validationMessage = "Username must contain only letters and numbers.";
        }
        // Character length validation
        else if (inputValue.Length > 15) // Adjust the character length limit as needed
        {
            validationMessage = "Username cannot exceed 15 characters.";
        }
        else
        {
            validationMessage = null;
        }
    }

    private async Task SendKey()
    {
        await signalRservice.IsConnectedAsync();
        Logger.LogInformation($"Hub connection: {signalRservice.hubConnection.ConnectionId}");

        Logger.LogInformation("sending user name");
        Console.WriteLine("Made it to sendKey");
        u = new User() { Username = key, hubConnection = signalRservice.hubConnection.ConnectionId };

        // Obtain a reference to the router actor
        var result = await akkaService.Ask<User>(u);
        Console.WriteLine(result);
        response = result; 
    }

    private async Task CreateANewLobby()
    {
        var hubc = signalRservice.hubConnection?.ConnectionId;
        var nl = new NewLobbyObject() { username = key, hubConnection = hubc };


        var result = await akkaService.Ask<ChangeUserState>(nl);
        if(result != null)
        {
            Console.WriteLine("made it all the way");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await signalRservice.IsConnectedAsync();

        var getlobbies = new AllLobbies()
            {
                hubConnection = signalRservice.hubConnection.ConnectionId,
                LobbiesIds = new(),
            };

        akkaService.Tell(getlobbies);

        signalRservice.hubConnection.On<GameLobby>("ReceiveMessage", (message) =>
        {
            if(message.Id == clickedLobbyId || message.HeadPlayer.Username == u.Username)
            {
                Logger.LogInformation("Made it to receive gamelobby object");
                GotSingalRMessage = message;

                var userToGame = new UserInAGame()
            {
                user = u,
                Game = GotSingalRMessage,
            };

                var userToGameJson = JsonConvert.SerializeObject(userToGame);

                // Append the serialized object as a route parameter to the URL
                NavigationManager.NavigateTo($"/LobbyStartPage/{Uri.EscapeDataString(userToGameJson)}");
                StateHasChanged();

            }

        });

        signalRservice.hubConnection.On<AllLobbies>("GetAllLobbies", (lobbie) =>
        {
            Console.WriteLine("Client side");
            Logger.LogInformation($"Got all lobbies {lobbie.LobbiesIds.Count}");
            lobbies = lobbie.LobbiesIds;
            StateHasChanged();
        });


        Console.WriteLine("Before start up");



    }

    public void JoinLobby(Guid id)
    {
        Console.WriteLine("in joinLobby method");
        clickedLobbyId = id;
        var addNewUser = new AddUserToLobby()
            {
                username = key,
                hubConnection = signalRservice.hubConnection.ConnectionId,
                lobbyId = id,
            };

        akkaService.Tell(addNewUser);
    }

}

