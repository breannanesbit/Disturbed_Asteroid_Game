@page "/user-input"
@using Actors.UserActors
@using Akka.Actor
@using Akka.AspNetCore
@using Microsoft.AspNetCore.SignalR.Client
@using Shared
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IActorBridge akkaService

<h3>User Input</h3>

<input @bind="key" />
<button class="btn btn-primary" @onclick="() => SendKey()">Send</button>

@if (!string.IsNullOrEmpty(response.Username))
{
    <p>@response.Username</p>
    <p>@response.Path</p>
    <button class="btn btn-primary" @onclick="() => CreateANewLobby()">Create a new Lobby</button>

}

@code {
    private string key;
    private User response = new();
    private HubConnection? hubConnection;
    private Lobby GotSingalRMessage = new();



    private async Task SendKey()
    {
        Console.WriteLine("Made it to sendKey");
        var u = new User() { Username= key};

        // Obtain a reference to the router actor
        var result = await akkaService.Ask<User>(u);
        Console.WriteLine(result);
        response = result;
    }

    private async Task CreateANewLobby()
    {
        var nl = new NewLobbyObject() { username = key };

        var result = await akkaService.Ask<ChangeUserState>(nl);
        if(result != null)
        {
            Console.WriteLine("made it all the way");
        }
    }

    protected override async Task OnInitializedAsync()
    {
         hubConnection = new HubConnectionBuilder()
         .WithUrl("http://signalrapi:8080/ComunicationHub")
             //.WithUrl("http://localhost:32794/ComunicationHub")
             .Build();

         hubConnection.On<Lobby>("ReceiveMessage", (message) =>
         {
             Console.WriteLine("made it");
              GotSingalRMessage = message;
              NavigationManager.NavigateTo($"/LobbyStartPage?lobby={GotSingalRMessage}");
             });

        Console.WriteLine("Before start up");

          await hubConnection.StartAsync();
        Console.WriteLine("Connection made it");

    }

    // Dispose the hub connection when component is disposed
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
            await hubConnection.DisposeAsync();
    }

}

