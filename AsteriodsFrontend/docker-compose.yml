version: '3.4'

services:
  # nginx:
  #   image: nginx:latest
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./ops/nginx.conf:/etc/nginx/nginx.conf
  #   networks:
  #     - raft_network
  
  swag:
    image: lscr.io/linuxserver/swag
    restart: unless-stopped
    cap_add:
        - NET_ADMIN
    environment:
        - PUID=1000
        - PGID=1000
        - TZ=America/Denver
        - SubDomains=wildcard 
        - URL=asteroidsgame.duckdns.org
        - VALIDATION=duckdns
        - DUCKDNSTOKEN=${DUCKDNSTOKEN}
        - STAGING=false
    volumes:
        - ./ops/nginx.conf:/config/nginx/site-confs/default.conf # new part
        - swag_data:/config

    ports:
        - 443:443 
  
  asteriodclient1:
    build:
      context: .
      dockerfile: AsteriodWeb/Dockerfile
    ports:
      - "4532:8080"
    environment:
      AKKA_CLUSTER: |
       akka {
          actor {
            provider = cluster
          }
          remote {
            dot-netty.tcp {
              hostname = "asteriodclient1"
              port = 2551
            }
          }
          cluster {
            seed-nodes = ["akka.tcp://akka-universe@asteriodclient1:2551", "akka.tcp://akka-universe@asteriodclient2:2551"]
            roles = ["userSession"]
          }
        }
    networks:
      - raft_network

  asteriodclient2:
     build:
       context: .
       dockerfile: AsteriodWeb/Dockerfile
     ports:
       - "4533:8080"
     environment:
       AKKA_CLUSTER: |
        akka {
           actor {
             provider = cluster
           }
           remote {
             dot-netty.tcp {
               hostname = "asteriodclient2"
               port = 2551
             }
           }
           cluster {
             seed-nodes = ["akka.tcp://akka-universe@asteriodclient1:2551", "akka.tcp://akka-universe@asteriodclient2:2551"]
             roles = ["userSession"]
           }
         }
     networks:
       - raft_network

  actors:
    build:
      context: .
      dockerfile: Actor/Dockerfile
    ports:
       - "4535:8080"
    environment:
      AKKA_CLUSTER: |
       akka {
          actor {
            provider = cluster
          }
          remote {
            dot-netty.tcp {
              hostname = "actors"
              port = 2551
            }
          }
          cluster {
            seed-nodes = ["akka.tcp://akka-universe@asteriodclient1:2551", "akka.tcp://akka-universe@asteriodclient2:2551"]
            roles = ["lobby"]
          }
        }
    networks:
      - raft_network

  raftapi:
    build:
      context: .
      dockerfile: RaftAPI/Dockerfile
    ports:
      - "2002:8080"
    environment:
      - NODES="http://raftapi2:8080,http://raftapi3:8080"
    networks:
      - raft_network

  raftapi2:
    build:
      context: .
      dockerfile: RaftAPI/Dockerfile
    ports:
      - "2003:8080"
    environment:
      - NODES="http://raftapi:8080,http://raftapi3:8080"
    networks:
      - raft_network

  raftapi3:
    build:
      context: .
      dockerfile: RaftAPI/Dockerfile
    ports:
      - "2004:8080"
    environment:
      - NODES="http://raftapi2:8080,http://raftapi:8080"
    networks:
      - raft_network

  asteriodsapi:
    image: ${DOCKER_REGISTRY-}asteriodsapi
    build:
      context: .
      dockerfile: AsteriodsAPI/Dockerfile
    ports:
      - "2010:8080"
    environment:
      - NODES="http://raftapi:8080,http://raftapi2:8080,http://raftapi3:8080"
    networks:
      - raft_network

  signalrapi:
    build: 
      context: .
      dockerfile: SignalR/Dockerfile
    ports:
      - "8000:8080"
    networks:
      - raft_network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      # - ./prometheus:/etc/prometheus
      - ./ops/pro.yml:/etc/prometheus/prometheus.yml

    networks:
      - raft_network

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    # command: -config.file=/etc/loki/local-config.yaml
    # volumes:
    #   # - ./loki:/etc/loki
    #   - ./ops/loki1.yml:/etc/grafana/provisioning/datasources/loki.yml
    networks:
      - raft_network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./provisioning:/etc/grafana/provisioning
      - ./ops/loki1.yml:/etc/grafana/provisioning/datasources/ds.yaml
      - ./ops/prometheus.yml:/etc/grafana/provisioning/datasources/prometheus.yaml
    depends_on:
      - loki
      - prometheus
    networks:
      - raft_network

  # otel-collector:
  #   image: otel/opentelemetry-collector
  #   container_name: otel-collector
  #   ports:
  #     - "4317:4317"
  #   volumes:
  #     - ./ops/collector-config.yaml:/etc/otel-collector/config.yaml
  otel-collector:
    image: otel/opentelemetry-collector
    ports:
      - "4317:4317"
    volumes:
      - ./ops/collector-config.yaml:/etc/otel-collector-config.yaml
    command: ["--config", "/etc/otel-collector-config.yaml"]
    networks:
      - raft_network

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - raft_network

networks:
  raft_network:
 
volumes:
  swag_data: